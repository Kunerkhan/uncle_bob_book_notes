# Оглавление
1. [Профессионализм](#Профессионализм)
2. [Коммуникация](#Коммуникация)
3. [Обещания](#Обещания)
4. [Написание кода ](#Написание-кода)
5. [Тесты](#Тесты)
6. [Работа в команде](#Работа-в-команде)
7. [Планирование](#Планирование)
8. [Оценка](#Оценка)
9. [Под давлением](#Под-давлением)
10. [Концентрация](#Концентрация)
11. [Наставники, ученики, мастерство](#Наставник,-ученики,-мастерство)


### Профессионализм
Обычно разработчики ни чем не рискуют.
Даже увольнение уже не так страшны, поскольку спрос на разработчиков высокий.
Поэтому есть и будут разработчики, которые работают спустя рукава.
А когда возникают ошибки, то перекладывают ответственность на других: работодатель или проектный менеджер.
Профессионализм - это ответственное отношение к работе.

К примеру.
Из-за вашей ошибки компания потеряла 10000$?  Тогда вы должны эту сумму своей компании возместить.

Конечно, с вас денег требовать не будут. Но относиться к потерям работодателя/клиента профессионал должен относится как своим.
За свои ошибки профессионал платит сам.

### Ответственность
Полную ответственность за вашу работу несете вы и только вы.
Поэтому вы должны быть уверены на все 100%, что ваш код рабочий.
Как убедиться?
 • Прогнать тесты
 • Проверить функционал со стороны клиента

### Научитесь извиняться
Вы не будете писать идеальный код.
Даже не пытайтесь. Ошибки будут всегда. Но профессионал должен отвечать за свои ошибки. 
И по мере роста стараться, чтобы повторений ошибок не было. А их общее количество стремилось к нулю.

### Не навреди
Еще раз: вы должны быть уверены на все 100%, что ваш код работает.
Как убедиться?
Тестируйте! Даже несколько раз. Со всех сторон.
И автоматизируйте тесты, чтобы это занимало меньше времени.
Контроль качества не должен ничего обнаружить! Поэтому никогда не отправляйте код, который не работает.

### Структура кода
Изменения должны вносить легко и без затрат. 
Как добиться такого?
Используйте принципы и паттерны проектирования, чтобы создавать гибкие и удобные в сопровождении структуры. 
И проверяйте свой код на гибкость, внося изменения. 
Если это оказывается сложнее, чем предполагалось, то перерабатывайте структуру кода.

И каждый раз при работе с модулем нужно перерабатывать его структуру.
Каждое чтение кода должно приводить к переработке. ГУГЛИ - “Правило бойскаута”.

***ВАЖНО!***
Тесты помогают убедиться в гибкости коста. После каждого внесения изменений прогоняйте тесты.

### Трудовая этика
За свое развитие вы несете ответственность сами, а не работодатель.
Он лишь может обеспечить условия: оплата курсов и митапов.
А то, как вы ими пользуетесь зависит от вас.

На саморазвитие нужно уделять отдельное от работы время. 
Дядя Боб рекомендует уделять 20 часов в неделю. Профессионалы не жалеют времени на совершенствовании в своей профессии.
Это позволяет вам повысить свою ценность.

### Знайте свою область
В каждой профессии есть базовые навыки из которых вытекает мастерство.
В программировании они тоже есть:
 • Паттерны проектирования - 24 паттерна из книги “Банда четырех”.
 • Принципы проектирования - SOLID и компонентное проектирование.
 • Методологии разработки - SCRUM, Lean, Kanban и т.д.
 • Дисциплины - TDD, ООП, CI/CD, структурное програ-е, парное програм-е.
 • Артефакты - работа с диаграммами: блок-схемы, UML, DFD и т.д.

Да, абсолютно все знать не получится. И прям вся база в вашей карьере может не пригодится.
Поэтому, я думаю достаточно знать какие знания вам понадобятся в вашей работе.
Это можно узнать поискав в интернете и спросив у коллег опытнее вас.
И нужно интересоваться новыми технологиями и подходами в разработке.
Вы не пойдете к врачу, который использует подорожник, когда есть пенициллин.
Поэтому держите руку на пульсе.

### Тренировка
Тренировка - когда вы целенаправленно делаете что-то вне работы, чтобы улучшить свои навыки.
Можно читать техническую литературу и статьи, документации. 
Хотя это сложнее и требует еще большей усидчивости.
Самое простое - решать задачки на Leetcode или CodeWars, чтобы держать мозг в тонусе.
Или разрабатывать pet-проекты, чтобы освоить новый фреймворк или библиотеку.
И все это можно делать вместе с друзьями или коллегами, мотивируя друг друга.
Это поможет развивать коммуникативные навыки и навыки работы в команде.

### Наставничество
Да, это неблагодарный труд. Материальной выгоды от этого нет.
Компании не оплачивают менторство. И занимает немало времени.
Но самый лучший способ чему-то научиться - учить других.
Если вы не можете объяснить что-то, то значит вы сами еще не до конца разобрались.
Профессионалы берут ответственность за обучение новичков.
Это требует терпения, но видеть успех вашего менти гораздо приятнее, чем свой собственный.
И также полезно для навыков коммуникации.

### Знание предметной области
Профессионал должен разбираться в сфере для которой он пишет код.
В ИТ сферы могут быть разные: финансы, медицина, образование и т.д.
Знание отрасли поможет вам избежать ошибок и продумать функционал. И развить бизнес мышление.
Необязательно быть экспертом, но иметь базовое представление о сфере полезно. 

Непрофессионализм - писать код просто по требованиям клиента, не разобравшись в теме.
Такое отношение может привезти к недопониманиям и потере времени.
Потому что еще чаще придется идти к клиенту и все уточнять.

### Понимание интересов работодателя/клиента
Проблемы работодателя/клиента - это ваши проблемы.
Вы должны понять их и постараться найти лучшее решение.
В ходе работы убедитесь в том, что разрабатываемый функционал действительно нужен работодателю/клиенту.

Понять чего хочет клиент бывает трудно.
Но, если вести диалог будет не только проектный менеджер, а вся команда или хотя бы тимлид.
Это позволит лучше понять ожидания и требования клиента и расставить приоритеты.

### Скромность
Если вы самый опытный, то
не надо злорадствовать над ошибками других. Ошибаются все. Помогайте коллегам стать лучше. В программировании одиночек не любят. 
И не принимайте свои ошибки близко к сердцу. Не всегда все идет по плану.
Сделали ошибку - смейтесь. И поймите почему она возникла, чтобы в следующий раз ее не допустить.

На этом про общие правила профессионализма все.
Завтра будет пост про коммуникацию: как говорить да, как говорить нет, общение в команде.
А в комментариях напиши про свой непрофессионализм/профессионализм по данным пунктам.
